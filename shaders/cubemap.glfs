#version 330 core
out vec4 FragColor;

in vec3 normal;
in vec3 color;
in vec3 FragPos;
in vec3 FragPos2;

uniform vec3 lightPos;
uniform vec3 viewPos;
uniform vec3 lightColor;

struct Light {
	float intensity;
	vec3 color;
};
uniform Light ambientLight;

const vec3 transparentColor = vec3(1.0, 0.0, 1.0);

uniform samplerCube cubemap; // cubemap texture sampler

void main()
{
	// ambient
	vec3 ambient = ambientLight.intensity * ambientLight.color;

	// diffuse 
	//vec3 norm = normalize(normal);
	//vec3 lightDir = normalize(lightPos - FragPos2);
	//float diff = max(dot(norm, lightDir), 0.0);
	//vec3 diffuse = diff * lightColor;

	// specular
	//float specularStrength = 0.3;
	//vec3 viewDir = normalize(viewPos - FragPos2);
	//vec3 reflectDir = reflect(-lightDir, norm);
	//float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	//vec3 specular = specularStrength * spec * lightColor;

	//vec3 finalColor = (ambient + diffuse + specular) * color;

	vec3 finalColor = (ambient) * color;

	vec4 textureColor = texture(cubemap, normalize(FragPos));

	//FragColor = textureColor * vec4(finalColor, 1.0f);

	if (textureColor.rgb == transparentColor) {
		//FragColor = vec4(textureColor.rgb, 0.0);
		FragColor = vec4(0.0, 0.0, 0.0, 0.0);
	} else {
		FragColor = textureColor * vec4(finalColor, 1.0f);
	}
}

