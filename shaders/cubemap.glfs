#version 330 core
out vec4 FragColor;

in vec3 normal;
in vec3 color;
in vec3 FragPos;
in vec3 FragPos2;

uniform vec3 viewPos;

struct Light {
	vec3 position;
	vec3 color;
	float ambientIntensity;
	float diffuseIntensity;
	float specularIntensity;
};
uniform Light light;

struct Material {
	samplerCube lightmap;
	bool existsLightmap;
	samplerCube normalmap;
	bool existsNormalmap;
	float shininess;
};
uniform Material material;

uniform samplerCube cubemap; // cubemap texture sampler

const vec3 transparentColor = vec3(1.0, 0.0, 1.0);

void main()
{
	// ambient
	vec3 ambient = light.ambientIntensity * light.color;

	// diffuse 
	vec3 norm;
	if (!material.existsNormalmap) {
		norm = normalize(normal);
	}else {
		//obtain normal from normal map in range [0,1]
		norm = texture(material.normalmap, FragPos2).rgb;
		//transform normal vector to range [-1,1]
		norm = normalize(normal * 2.0 - 1.0);
	}
	vec3 lightDir = normalize(-light.position + FragPos2);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * light.diffuseIntensity * light.color;

	// specular
	vec3 viewDir = normalize(-viewPos + FragPos2);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = spec * light.specularIntensity * light.color * (material.existsLightmap ? texture(material.lightmap, normalize(FragPos2)).rgb : vec3(1.0, 1.0, 1.0));

	vec3 finalColor = (ambient + diffuse + specular) * color;

	vec4 textureColor = texture(cubemap, normalize(FragPos));

	if (textureColor.rgb == transparentColor) {
		FragColor = vec4(0.0, 0.0, 0.0, 0.0);
	} else {
		FragColor = textureColor * vec4(finalColor, 1.0f);
	}
}

