#version 330 core
out vec4 FragColor;

in vec3 FragPos;
in vec3 color;
in vec2 TexCoord;
in vec3 surfaceNormal;
in vec3 TangentLightPos;
in vec3 TangentViewPos;
in vec3 TangentFragPos;

uniform vec3 viewPos;

struct Light {
	vec3 direction;
	vec3 color;
	float ambientIntensity;
	float diffuseIntensity;
	float specularIntensity;
};
uniform Light light;

struct Material {
	sampler2D diffuseTexture; // texture sampler
	sampler2D lightmap;
	bool existsLightmap;
	sampler2D normalmap;
	bool existsNormalmap;
	sampler2D displacementmap;
	bool existsDisplacementmap;
	float shininess;
};
uniform Material material;

const float heightScale = 0.01;

vec2 DisplacementMapping(vec2 texCoords, vec3 viewDir)
{
	// number of depth layers
	const float minLayers = 8.0;
	const float maxLayers = 32.0;
	float numLayers = mix(maxLayers, minLayers, max(dot(vec3(0.0, 0.0, 1.0), viewDir), 0.0));
	// calculate the size of each layer
	float layerDepth = 1.0 / numLayers;
	// depth of current layer
	float currentLayerDepth = 0.0;
	// the amount to shift the texture coordinates per layer (from vector P)
	vec2 P = viewDir.xy * heightScale;
	vec2 deltaTexCoords = P / numLayers;

	// get initial values
	vec2 currentTexCoords = texCoords;
	float currentDepthMapValue = texture(material.displacementmap, currentTexCoords).r;
	
	while(currentLayerDepth < currentDepthMapValue)
	{
		// shift texture coordinates along direction of P
		currentTexCoords -= deltaTexCoords;
		// get depthmap value at current texture coordinates
		currentDepthMapValue = texture(material.displacementmap, currentTexCoords).r;
		// get depth of next layer
		currentLayerDepth += layerDepth;
	}

	// get texture coordinates before collision (reverse operations)
	vec2 prevTexCoords = currentTexCoords + deltaTexCoords;

	// get depth after and before collision for linear interpolation
	float afterDepth  = currentDepthMapValue - currentLayerDepth;
	float beforeDepth = texture(material.displacementmap, prevTexCoords).r - currentLayerDepth + layerDepth;

	// interpolation of texture coordinates
	float weight = afterDepth / (afterDepth - beforeDepth);
	vec2 finalTexCoords = prevTexCoords * weight + currentTexCoords * (1.0 - weight);

	return finalTexCoords;
}

const vec3 transparentColor = vec3(1.0, 0.0, 1.0);
uniform int userMode;
uniform bool phongLighting;

uniform int frameIndex;
uniform int frameRows;
uniform int frameCols;

vec2 frameSize = vec2(1.0f / frameCols, 1.0f / frameRows);
int frameCol = frameIndex % frameCols;
int frameRow = frameIndex / frameRows;
vec2 offset = vec2(frameCol * frameSize.x, frameRow * frameSize.y);
vec2 adjustedTexCoord = TexCoord * frameSize + offset;

void main()
{
	// ambient
	vec3 ambient = vec3(1.0, 1.0, 1.0);
	if (phongLighting) {
		ambient = light.ambientIntensity * light.color;
	}

	vec3 lightDir;
	vec3 viewDir;
	vec3 normal;

	if (!material.existsNormalmap && !material.existsDisplacementmap) {
		normal = surfaceNormal;
		lightDir = normalize(-light.direction);
		viewDir = normalize(viewPos - FragPos);

	}else {
		// obtain normal from normal map in range [0,1]
		normal = texture(material.normalmap, adjustedTexCoord).rgb;
		// transform normal vector to range [-1,1]
		normal = normalize(normal * 2.0 - 1.0);
		lightDir = normalize(TangentLightPos - TangentFragPos);
		viewDir = normalize(TangentViewPos - TangentFragPos);
	}

	if (material.existsDisplacementmap) {
		adjustedTexCoord = DisplacementMapping(adjustedTexCoord, viewDir);
	}

	vec3 diffuse = vec3(0.0, 0.0, 0.0);
	vec3 specular = vec3(0.0, 0.0, 0.0);

	if (phongLighting) {
		// diffuse
		float diff = max(dot(-lightDir, normal), 0.0);
		diffuse = diff * light.diffuseIntensity * light.color;

		// specular
		vec3 reflectDir = reflect(-lightDir, normal);
		float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
		specular = spec * light.specularIntensity * light.color * (material.existsLightmap ? texture(material.lightmap, adjustedTexCoord).rgb : vec3(1.0, 1.0, 1.0));
	}

	vec3 textureColor = texture(material.diffuseTexture, adjustedTexCoord).rgb;

	vec3 finalColor = (ambient + diffuse + specular) * color * textureColor;

	if (userMode == 0 && textureColor.rgb == transparentColor) {
		FragColor = vec4(0.0, 0.0, 0.0, 0.0);
	} else {
		FragColor = vec4(finalColor, 1.0);
	}
}