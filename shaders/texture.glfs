#version 330 core
out vec4 FragColor;

in vec3 FragPos;
in vec3 normal;
in vec3 color;
in vec2 TexCoord;
in vec3 TangentLightPos;
in vec3 TangentViewPos;
in vec3 TangentFragPos;

uniform vec3 viewPos;

struct Light {
	vec3 position;
	vec3 color;
	float ambientIntensity;
	float diffuseIntensity;
	float specularIntensity;
};
uniform Light light;

struct Material {
	sampler2D lightmap;
	bool existsLightmap;
	sampler2D normalmap;
	bool existsNormalmap;
	float shininess;
};
uniform Material material;

// texture sampler
uniform sampler2D diffuseTexture;
uniform sampler2D lightmap;

const vec3 transparentColor = vec3(1.0, 0.0, 1.0);
uniform int userMode;

uniform int frameIndex;
uniform int frameRows;
uniform int frameCols;

vec2 frameSize = vec2(1.0f / frameCols, 1.0f / frameRows);
int frameCol = frameIndex % frameCols;
int frameRow = frameIndex / frameRows;
vec2 offset = vec2(frameCol * frameSize.x, frameRow * frameSize.y);
vec2 adjustedTexCoord = TexCoord * frameSize + offset;

void main()
{
	// ambient
	vec3 ambient = light.ambientIntensity * light.color;

	// diffuse
	vec3 norm;
	if (!material.existsNormalmap) {
		norm = normalize(normal);
	}else {
		// obtain normal from normal map in range [0,1]
		norm = texture(material.normalmap, adjustedTexCoord).rgb;
		//norm.g = -norm.g;
		norm.b = -norm.b;
		//norm.r = -norm.r;
		// transform normal vector to range [-1,1]
		norm = normalize(norm * 2.0 - 1.0);
	}

	//vec3 lightDir = normalize(-light.position + FragPos);
	vec3 lightDir = normalize(TangentLightPos - TangentFragPos);

	float diff = max(dot(lightDir, norm), 0.0);
	vec3 diffuse = diff * light.diffuseIntensity * light.color;

	// specular
	//vec3 viewDir = normalize(-viewPos + FragPos);
	vec3 viewDir = normalize(TangentViewPos - TangentFragPos);

	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = spec * light.specularIntensity * light.color;
	//vec3 specular = spec * light.specularIntensity * light.color * (material.existsLightmap ? texture(material.lightmap, adjustedTexCoord).rgb : vec3(1.0, 1.0, 1.0));

	vec3 textureColor = texture(diffuseTexture, adjustedTexCoord).rgb;

	vec3 finalColor = (ambient + diffuse + specular) * color * textureColor;

	if (userMode == 0 && textureColor.rgb == transparentColor) {
		FragColor = vec4(0.0, 0.0, 0.0, 0.0);
	}else {
		//FragColor = textureColor * vec4(finalColor, 1.0f);
		FragColor = vec4(finalColor, 1.0f);
	}
}