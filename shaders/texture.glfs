#version 330 core
out vec4 FragColor;

in vec3 FragPos;
in vec3 color;
in vec2 TexCoord;
in vec3 surfaceNormal;
in vec3 TangentLightPos;
in vec3 TangentViewPos;
in vec3 TangentFragPos;

uniform vec3 viewPos;

struct Light {
	vec3 position;
	vec3 color;
	float ambientIntensity;
	float diffuseIntensity;
	float specularIntensity;
};
uniform Light light;

struct Material {
	sampler2D diffuseTexture; // texture sampler
	sampler2D lightmap;
	bool existsLightmap;
	sampler2D normalmap;
	bool existsNormalmap;
	float shininess;
};
uniform Material material;

const vec3 transparentColor = vec3(1.0, 0.0, 1.0);
uniform int userMode;

uniform int frameIndex;
uniform int frameRows;
uniform int frameCols;

vec2 frameSize = vec2(1.0f / frameCols, 1.0f / frameRows);
int frameCol = frameIndex % frameCols;
int frameRow = frameIndex / frameRows;
vec2 offset = vec2(frameCol * frameSize.x, frameRow * frameSize.y);
vec2 adjustedTexCoord = TexCoord * frameSize + offset;

void main()
{
	// ambient
	vec3 ambient = light.ambientIntensity * light.color;

	vec3 lightDir;
	vec3 viewDir;
	vec3 normal;

	if (!material.existsNormalmap) {
		normal = surfaceNormal;
		lightDir = normalize(-light.position + FragPos);
		viewDir = normalize(-viewPos + FragPos);

	}else {
		// obtain normal from normal map in range [0,1]
		normal = texture(material.normalmap, adjustedTexCoord).rgb;
		// transform normal vector to range [-1,1]
		normal = normalize(normal * 2.0 - 1.0);
		lightDir = normalize(TangentLightPos - TangentFragPos);
		viewDir = normalize(TangentViewPos - TangentFragPos);
	}

	// diffuse
	float diff = max(dot(-lightDir, normal), 0.0);
	vec3 diffuse = diff * light.diffuseIntensity * light.color;

	// specular
	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = spec * light.specularIntensity * light.color * (material.existsLightmap ? texture(material.lightmap, adjustedTexCoord).rgb : vec3(1.0, 1.0, 1.0));

	vec3 textureColor = texture(material.diffuseTexture, adjustedTexCoord).rgb;

	vec3 finalColor = (ambient + diffuse + specular) * color * textureColor;

	if (userMode == 0 && textureColor.rgb == transparentColor) {
		FragColor = vec4(0.0, 0.0, 0.0, 0.0);
	}else {
		FragColor = vec4(finalColor, 1.0);
	}
}