#version 330 core
out vec4 FragColor;

in vec3 FragPos;
in vec3 normal;
in vec3 color;
in vec2 TexCoord;

uniform vec3 lightPos;
uniform vec3 viewPos;
uniform vec3 lightColor;

const vec3 transparentColor = vec3(1.0, 0.0, 1.0);

// texture sampler
uniform sampler2D texture1;

uniform int frameIndex;
uniform int frameRows;
uniform int frameCols;

vec2 frameSize = vec2(1.0f / frameCols, 1.0f / frameRows);
int frameCol = frameIndex % frameCols;
int frameRow = frameIndex / frameRows;
vec2 offset = vec2(frameCol * frameSize.x, frameRow * frameSize.y);
vec2 adjustedTexCoord = TexCoord * frameSize + offset;

void main()
{
	// ambient
	//float ambientStrength = 0.1;
	//vec3 ambient = ambientStrength * lightColor;

	// diffuse 
	//vec3 norm = normalize(normal);
	//vec3 lightDir = normalize(lightPos - FragPos);
	//float diff = max(dot(norm, lightDir), 0.0);
	//vec3 diffuse = diff * lightColor;

	// specular
	//float specularStrength = 0.3;
	//vec3 viewDir = normalize(viewPos - FragPos);
	//vec3 reflectDir = reflect(-lightDir, norm);
	//float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	//vec3 specular = specularStrength * spec * lightColor;

	//vec3 finalColor = (ambient + diffuse + specular) * color;

	vec4 textureColor = texture(texture1, adjustedTexCoord);

	//FragColor = textureColor * vec4(finalColor, 1.0f);

	if (textureColor.rgb == transparentColor) {
		FragColor = vec4(0.0, 0.0, 0.0, 0.0);
	}else {
		FragColor = textureColor * vec4(color, 1.0f);
	}
}