#version 330 core
layout (location = 0) out vec3 gPosition;
layout (location = 1) out vec3 gNormal;
layout (location = 2) out vec4 gAlbedoSpec;

in vec3 FragPos;
in vec3 color;
in vec2 TexCoord;
in vec3 surfaceNormal;

uniform sampler2D texture_diffuse1;
//uniform sampler2D texture_specular1;

uniform int frameIndex;
uniform int frameRows;
uniform int frameCols;

vec2 frameSize = vec2(1.0f / frameCols, 1.0f / frameRows);
int frameCol = frameIndex % frameCols;
int frameRow = frameIndex / frameRows;
vec2 offset = vec2(frameCol * frameSize.x, frameRow * frameSize.y);
vec2 adjustedTexCoord = TexCoord * frameSize + offset;

void main()
{
	// store the fragment position vector in the first gbuffer texture
	gPosition = FragPos;
	// also store the per-fragment normals into the gbuffer
	gNormal = normalize(surfaceNormal);
	// and the diffuse per-fragment color
	gAlbedoSpec.rgb = texture(texture_diffuse1, TexCoord).rgb;
	// store specular intensity in gAlbedoSpec's alpha component
	//gAlbedoSpec.a = texture(texture_specular1, TexCoord).r;
	gAlbedoSpec.a = 1.0;
}