#version 330 core
out vec4 FragColor;

in vec2 TexCoord;

uniform sampler2D gLighting;

void main()
{

	
	// Get the texture size
	vec2 texelSize = 1.0 / textureSize(gLighting, 0);

	// Sample the surrounding pixels
	vec3 colorCenter = texture(gLighting, TexCoord).rgb;
	vec3 colorN = texture(gLighting, TexCoord + vec2(0.0, -1.0) * texelSize).rgb;
	vec3 colorS = texture(gLighting, TexCoord + vec2(0.0, 1.0) * texelSize).rgb;
	vec3 colorE = texture(gLighting, TexCoord + vec2(1.0, 0.0) * texelSize).rgb;
	vec3 colorW = texture(gLighting, TexCoord + vec2(-1.0, 0.0) * texelSize).rgb;

	// Simple FXAA calculation
	vec3 color = colorCenter;
	float luma = dot(colorCenter, vec3(0.299, 0.587, 0.114));
	float lumaN = dot(colorN, vec3(0.299, 0.587, 0.114));
	float lumaS = dot(colorS, vec3(0.299, 0.587, 0.114));
	float lumaE = dot(colorE, vec3(0.299, 0.587, 0.114));
	float lumaW = dot(colorW, vec3(0.299, 0.587, 0.114));

	// Calculate edge detection
	if (abs(luma - lumaN) > 0.1 || abs(luma - lumaS) > 0.1 || abs(luma - lumaE) > 0.1 || abs(luma - lumaW) > 0.1) {
		// Blend the colors (simple averaging for demonstration)
		color = (colorN + colorS + colorE + colorW) / 4.0;
		color = vec3(0, 1, 0);
	}

	FragColor = vec4(color, 1.0); // Output the final color
	

	/*
	vec3 col = texture(gLighting, TexCoord).rgb;
	FragColor = vec4(col, 1.0);
	*/
}