#version 330 core
layout (location = 0) out vec4 screenTexture; // final color texture
layout (location = 1) out vec4 FragColor; // final color

in vec2 TexCoord;

// this directive must always be on this line number (8), to let the engine edit this line and set the required number of point lights on runtime
#define NR_POINT_LIGHTS 1

uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gAlbedo;
uniform sampler2D gLightmap;
uniform sampler2D gViewDir;

struct Light {
	vec3 direction;
	vec3 color;
	float ambientIntensity;
	float diffuseIntensity;
	float specularIntensity;
};
uniform Light light;

struct PointLight {
	vec3 position;
	vec3 color;
	float ambientIntensity;
	float diffuseIntensity;
	float specularIntensity;
	float constant;
	float linear;
	float quadratic;
	float cutoffDistance;
};
uniform PointLight pointLight;
uniform PointLight pointLights[NR_POINT_LIGHTS];

uniform bool phongLighting;
uniform vec3 viewPos;

vec3 calcDirLight(Light light, vec3 normal, vec3 viewDir, vec3 Specular);
vec3 calcPointLights(PointLight pointLight, vec3 normal, vec3 FragPos, vec3 viewDir, vec3 Specular);

void main()
{
	// retrieve data from gbuffer
	vec3 FragPos  = texture(gPosition, TexCoord).rgb;
	vec4 gAlbedo  = texture(gAlbedo, TexCoord);

	vec3 Diffuse = gAlbedo.rgb;

	vec3 Specular = texture(gLightmap, TexCoord).rgb;
	vec3 N = texture(gNormal, TexCoord).rgb;
	vec3 viewDir = texture(gViewDir, TexCoord).rgb;

	vec3 lightResult = vec3(0.0, 0.0, 0.0);

	if (phongLighting) {

		lightResult = calcDirLight(light, N, viewDir, Specular);
		for(int i = 0; i < NR_POINT_LIGHTS; i++) {
			lightResult += calcPointLights(pointLights[i], N, FragPos, viewDir, Specular);
		}

	}else {
		// ambient
		lightResult = (light.ambientIntensity + light.diffuseIntensity) * light.color;
	}

	vec3 finalColor = lightResult * Diffuse;

	FragColor = vec4(finalColor, 1.0);
	screenTexture = FragColor;
}

vec3 calcDirLight(Light light, vec3 normal, vec3 viewDir, vec3 Specular)
{
	vec3 lightDir = normalize(-light.direction);

	// ambient
	vec3 ambient = light.ambientIntensity * light.color;

	// diffuse
	float diff = max(dot(lightDir, normal), 0.0);
	vec3 diffuse = diff * light.diffuseIntensity * light.color;

	// specular
	vec3 reflectDir = reflect(lightDir, normal);
	float spec = pow(max(dot(viewDir, -reflectDir), 0.0), 32);
	vec3 specular = spec * light.specularIntensity * light.color * Specular;

	return (ambient + diffuse + specular);
}

vec3 calcPointLights(PointLight pointLight, vec3 normal, vec3 FragPos, vec3 viewDir, vec3 Specular)
{
	// save lighting calculations if fragment is not within the light's cutoff distance
	if (length(pointLight.position - FragPos) > pointLight.cutoffDistance) {
		return vec3(0.0, 0.0, 0.0);
	}
	// avoid division by zero
	if (pointLight.constant == 0.0 && pointLight.linear == 0.0 && pointLight.quadratic == 0.0) {
		return vec3(0.0, 0.0, 0.0);
	}
	
	vec3 pointLightDir = normalize(pointLight.position - FragPos);
	float pointLightDiff = max(dot(pointLightDir, normal), 0.0);
	vec3 pointLightReflectDir = reflect(pointLightDir, normal);

	float pointLightSpec = pow(max(dot(viewDir, -pointLightReflectDir), 0.0), 32);
	float pointLightDistance = length(pointLight.position - FragPos);

	float attenuation = 1.0 / (pointLight.constant + pointLight.linear * pointLightDistance + pointLight.quadratic * (pointLightDistance * pointLightDistance));

	vec3 diffuse  = pointLightDiff * pointLight.diffuseIntensity * pointLight.color;
	diffuse *= attenuation;
	vec3 specular = pointLightSpec * pointLight.specularIntensity * pointLight.color * Specular;
	specular *= attenuation;

	return (diffuse + specular);
}

