#version 330 core
layout (location = 0) out vec4 screenTexture; // final color texture
layout (location = 1) out vec4 FragColor; // final color

in vec2 TexCoord;

uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gAlbedo;
uniform sampler2D gLightmap;
uniform sampler2D gViewDir;

struct Light {
	vec3 direction;
	vec3 color;
	float ambientIntensity;
	float diffuseIntensity;
	float specularIntensity;
};
uniform Light light;

uniform bool phongLighting;
uniform vec3 viewPos;

void main()
{
	// retrieve data from gbuffer
	vec3 FragPos  = texture(gPosition, TexCoord).rgb;
	vec4 gAlbedo  = texture(gAlbedo, TexCoord);

	vec3 Diffuse = gAlbedo.rgb;

	vec3 Specular = texture(gLightmap, TexCoord).rgb;
	vec3 N = texture(gNormal, TexCoord).rgb;
	vec3 viewDir = texture(gViewDir, TexCoord).rgb;

	vec3 lightDir = normalize(-light.direction);

	vec3 ambient = vec3(1.0, 1.0, 1.0);
	vec3 diffuse = vec3(0.0, 0.0, 0.0);
	vec3 specular = vec3(0.0, 0.0, 0.0);

	if (phongLighting) {
		// ambient
		ambient = light.ambientIntensity * light.color;

		// diffuse
		float diff = max(dot(-lightDir, N), 0.0);
		diffuse = diff * light.diffuseIntensity * light.color;

		// specular
		vec3 reflectDir = reflect(-lightDir, N);
		float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
		specular = spec * light.specularIntensity * light.color * Specular;

	}else {
		// ambient
		ambient = (light.ambientIntensity + light.diffuseIntensity) * light.color;
	}

	vec3 finalColor = (ambient + diffuse + specular) * Diffuse;

	FragColor = vec4(finalColor, 1.0);
	screenTexture = FragColor;
}

